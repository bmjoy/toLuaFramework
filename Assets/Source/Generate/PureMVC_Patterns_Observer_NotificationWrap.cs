//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PureMVC_Patterns_Observer_NotificationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PureMVC.Patterns.Observer.Notification), typeof(System.Object));
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreatePureMVC_Patterns_Observer_Notification);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Name", get_Name, null);
		L.RegVar("Body", get_Body, set_Body);
		L.RegVar("Type", get_Type, set_Type);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePureMVC_Patterns_Observer_Notification(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				PureMVC.Patterns.Observer.Notification obj = new PureMVC.Patterns.Observer.Notification(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				PureMVC.Patterns.Observer.Notification obj = new PureMVC.Patterns.Observer.Notification(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				PureMVC.Patterns.Observer.Notification obj = new PureMVC.Patterns.Observer.Notification(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PureMVC.Patterns.Observer.Notification.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PureMVC.Patterns.Observer.Notification obj = (PureMVC.Patterns.Observer.Notification)ToLua.CheckObject<PureMVC.Patterns.Observer.Notification>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PureMVC.Patterns.Observer.Notification obj = (PureMVC.Patterns.Observer.Notification)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Body(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PureMVC.Patterns.Observer.Notification obj = (PureMVC.Patterns.Observer.Notification)o;
			object ret = obj.Body;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Body on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PureMVC.Patterns.Observer.Notification obj = (PureMVC.Patterns.Observer.Notification)o;
			string ret = obj.Type;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Body(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PureMVC.Patterns.Observer.Notification obj = (PureMVC.Patterns.Observer.Notification)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Body = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Body on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PureMVC.Patterns.Observer.Notification obj = (PureMVC.Patterns.Observer.Notification)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Type = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Type on a nil value");
		}
	}
}

